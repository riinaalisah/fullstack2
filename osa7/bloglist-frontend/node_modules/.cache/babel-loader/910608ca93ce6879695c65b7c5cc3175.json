{"ast":null,"code":"import _slicedToArray from \"/home/alisa/fullstack/osa7/bloglist-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alisa/fullstack/osa7/bloglist-frontend/src/components/Togglable.js\";\nimport React, { useState, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nconst Togglable = React.forwardRef((props, ref) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const hideWhenVisible = {\n    display: visible ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visible ? '' : 'none'\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return toggleVisibility;\n  });\n  Togglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: hideWhenVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, props.buttonLabel)), React.createElement(\"div\", {\n    style: showWhenVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, props.children, React.createElement(Button, {\n    onClick: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"cancel\")));\n});\nexport default Togglable;","map":{"version":3,"sources":["/home/alisa/fullstack/osa7/bloglist-frontend/src/components/Togglable.js"],"names":["React","useState","useImperativeHandle","PropTypes","Button","Togglable","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","propTypes","buttonLabel","string","isRequired","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,mBAA1B,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,MAAMC,SAAS,GAAGL,KAAK,CAACM,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA,oBACnBP,QAAQ,CAAC,KAAD,CADW;AAAA;AAAA,QAC1CQ,OAD0C;AAAA,QACjCC,UADiC;;AAGjD,QAAMC,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAP,EAAAA,mBAAmB,CAACM,GAAD,EAAM,MAAM;AAC7B,WACEM,gBADF;AAGD,GAJkB,CAAnB;AAMAT,EAAAA,SAAS,CAACU,SAAV,GAAsB;AACpBC,IAAAA,WAAW,EAAEb,SAAS,CAACc,MAAV,CAAiBC;AADV,GAAtB;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAEP,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCP,KAAK,CAACS,WAA1C,CADF,CADF,EAIE;AAAK,IAAA,KAAK,EAAEH,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACY,QADT,EAEE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEL,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAJF,CADF;AAWD,CA/BiB,CAAlB;AAiCA,eAAeT,SAAf","sourcesContent":["import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from 'semantic-ui-react'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return (\n      toggleVisibility\n    )\n  })\n\n  Togglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n  }\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <Button onClick={toggleVisibility}>{props.buttonLabel}</Button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <Button onClick={toggleVisibility}>cancel</Button>\n      </div>\n    </div>\n  )\n})\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}